package postgreSQL

import (
	"log"

	"github.com/karlgama/chat-app-go.git/infra/postgreSQL/models"
)

// RunCustomMigrations executa migra√ß√µes customizadas que o AutoMigrate n√£o consegue fazer
func RunCustomMigrations() {
	log.Println("üîß Executando migra√ß√µes customizadas...")

	// Adiciona √≠ndices customizados se necess√°rio
	createCustomIndexes()

	// Adiciona constraints customizadas
	createCustomConstraints()

	// Adiciona dados iniciais se necess√°rio
	seedInitialData()

	log.Println("‚úÖ Migra√ß√µes customizadas conclu√≠das!")
}

func createCustomIndexes() {
	// Exemplo: √çndice composto para performance
	err := DB.Exec(`
		CREATE INDEX IF NOT EXISTS idx_chat_users_chat_user 
		ON chat_users(chat_id, user_id)
	`).Error

	if err != nil {
		log.Printf("‚ö†Ô∏è  Erro ao criar √≠ndice customizado: %v", err)
	}
}

func createCustomConstraints() {
	// Verifica se a constraint j√° existe antes de criar
	var count int64

	// Foreign key para chat_id
	DB.Raw(`
		SELECT COUNT(*) 
		FROM information_schema.table_constraints 
		WHERE constraint_name = 'fk_chat_users_chat_id' 
		AND table_name = 'chat_users'
	`).Scan(&count)

	if count == 0 {
		err := DB.Exec(`
			ALTER TABLE chat_users 
			ADD CONSTRAINT fk_chat_users_chat_id 
			FOREIGN KEY (chat_id) REFERENCES chats(id) ON DELETE CASCADE
		`).Error

		if err != nil {
			log.Printf("‚ö†Ô∏è  Erro ao criar constraint chat_id: %v", err)
		} else {
			log.Println("‚úÖ Constraint fk_chat_users_chat_id criada")
		}
	} else {
		log.Println("‚úÖ Constraint fk_chat_users_chat_id j√° existe")
	}

	// Foreign key para user_id
	DB.Raw(`
		SELECT COUNT(*) 
		FROM information_schema.table_constraints 
		WHERE constraint_name = 'fk_chat_users_user_id' 
		AND table_name = 'chat_users'
	`).Scan(&count)

	if count == 0 {
		err := DB.Exec(`
			ALTER TABLE chat_users 
			ADD CONSTRAINT fk_chat_users_user_id 
			FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
		`).Error

		if err != nil {
			log.Printf("‚ö†Ô∏è  Erro ao criar constraint user_id: %v", err)
		} else {
			log.Println("‚úÖ Constraint fk_chat_users_user_id criada")
		}
	} else {
		log.Println("‚úÖ Constraint fk_chat_users_user_id j√° existe")
	}
}

func seedInitialData() {
	// Verifica se j√° existem dados
	var userCount int64
	DB.Model(&models.UserModel{}).Count(&userCount)

	if userCount == 0 {
		log.Println("üìã Criando dados iniciais de exemplo...")
		// Aqui voc√™ pode criar usu√°rios de exemplo para desenvolvimento
		// Apenas se necess√°rio
	}
}

// DropAllTables remove todas as tabelas (CUIDADO! Apenas para desenvolvimento)
func DropAllTables() {
	if DB == nil {
		log.Println("‚ùå Banco de dados n√£o conectado")
		return
	}

	log.Println("üóëÔ∏è  ATEN√á√ÉO: Removendo todas as tabelas...")

	// Lista das tabelas para remover na ordem correta (devido √†s foreign keys)
	tables := []string{
		"chat_users",
		"chats",
		"users",
	}

	for _, table := range tables {
		err := DB.Exec("DROP TABLE IF EXISTS " + table + " CASCADE").Error
		if err != nil {
			log.Printf("‚ö†Ô∏è  Erro ao remover tabela %s: %v", table, err)
		} else {
			log.Printf("‚úÖ Tabela %s removida", table)
		}
	}

	log.Println("üóëÔ∏è  Todas as tabelas foram removidas!")
}
